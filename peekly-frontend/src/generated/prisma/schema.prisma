// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  fid       String?  @unique
  pfic      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String?
  address   String?

  Post Post[]

  Like Like[]

  View View[]
}

model Post {
  id             String   @id @default(uuid())
  userId         String
  coinAddress    String
  previewUrl     String
  LikeCount      Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  description    String?
  creatorAddress String?
  user           User     @relation(fields: [userId], references: [id])
  Like           Like[]
  View           View[]

  @@index([userId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@index([userId])
  @@index([postId])
}

model View {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Float
  isBasePay Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}
